---
import type { AstroComponentFactory } from 'astro/dist/runtime/server';
import { Layout } from '@/widgets/layout';
import { DateTime } from 'luxon';

export type Props = {
  title: string;
  description: string;
  publishDate: Date;
  Content: AstroComponentFactory;
};

type PostFrontmatter = {
  title: string;
  slug: string;
  description: string;
  publishDate: string;
};

export async function getStaticPaths() {
  const getPosts = async () => {
    const mock = import.meta.env.BLOG_CONTENT_MOCK;

    if (mock) {
      const mockPosts = await Astro.glob<PostFrontmatter>(
        '../../../content/mock/**/*.md'
      );

      return mockPosts.filter((p) => p.file?.includes(mock));
    }

    return Astro.glob<PostFrontmatter>('../../../content/live/**/*.md');
  };

  const posts = await getPosts();

  return posts.map((post) => ({
    params: {
      slug: post.frontmatter.slug,
    },
    props: {
      title: post.frontmatter.title,
      description: post.frontmatter.description,
      publishDate: DateTime.fromFormat(
        post.frontmatter.publishDate,
        'yyyy-LL-dd'
      ).toJSDate(),
      Content: post.Content,
    },
  }));
}

const { title, description, publishDate, Content } = Astro.props;

const publishDateDisplay = DateTime.fromJSDate(publishDate)
  .toFormat('LLL dd, yyyy')
  .toUpperCase();
---

<Layout
  title={title}
  description={description}
  openGraph={{
    type: 'article',
    article: {
      publishedTime: publishDate.toISOString(),
      section: 'Technology',
    },
  }}
>
  <div class="container">
    <a class="link" href="/">Back to recent posts</a>
    <article class="mt-8">
      <h1 class="text-4xl font-bold">{title}</h1>
      <div class="publish-date">
        <time datetime={publishDate.toISOString()}>{publishDateDisplay}</time>
      </div>
      <div class="post-content prose my-8 max-w-full">
        <Content />
      </div>
    </article>
  </div>
</Layout>

<style>
  .publish-date {
    @apply mt-2 text-xs text-gray-700;
  }

  .post-content :global(.astro-code) {
    @apply rounded-md p-4 text-sm;
  }

  .post-content :global(blockquote) {
    @apply py-1;
  }

  .post-content :global(a) {
    color: var(--color-link);
    text-decoration: none;
  }

  .prose :global(:where(ul > li):not(:where([class~='not-prose'] *))::marker) {
    @apply text-gray-700;
  }

  .post-content :global(a:hover) {
    color: var(--color-link-hover);
    text-decoration: underline;
  }
</style>
