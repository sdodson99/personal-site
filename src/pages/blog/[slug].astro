---
import { CollectionEntry, getCollection } from 'astro:content';
import { Layout } from '@/widgets/layout';
import { DateTime } from 'luxon';

export type Props = {
  post: CollectionEntry<'blog'>;
};

export async function getStaticPaths() {
  const getPostsDirectoryPrefix = () => {
    const mock = import.meta.env.BLOG_CONTENT_MOCK;

    if (mock) {
      return `mock/${mock}/`;
    }

    return 'live/';
  };

  const postsDirectoryPrefix = getPostsDirectoryPrefix();
  const posts = await getCollection('blog', ({ id }) =>
    id.startsWith(postsDirectoryPrefix)
  );

  return posts.map((post) => ({
    params: {
      slug: post.slug,
    },
    props: {
      post,
    },
  }));
}

const { post } = Astro.props;
const { title, description, publishDate } = post.data;

const publishDateDisplay = DateTime.fromJSDate(publishDate)
  .toFormat('LLL dd, yyyy')
  .toUpperCase();

const { Content } = await post.render();
---

<Layout
  title={title}
  description={description}
  openGraph={{
    type: 'article',
    article: {
      publishedTime: publishDate.toISOString(),
      section: 'Technology',
    },
  }}
>
  <div class="container">
    <a class="link" href="/">Back to recent posts</a>
    <article class="mt-8">
      <h1 class="text-4xl font-bold">{title}</h1>
      <div class="mt-2 text-xs text-gray-700">
        <time datetime={publishDate.toISOString()}>{publishDateDisplay}</time>
      </div>
      <div class="post-content prose my-8 max-w-full">
        <Content />
      </div>
    </article>
  </div>
</Layout>

<style>
  .post-content :global(.astro-code) {
    @apply rounded-md p-4 text-sm;
  }

  .post-content :global(blockquote) {
    @apply py-1;
  }

  .post-content :global(a) {
    color: var(--color-link);
    text-decoration: none;
  }

  .prose :global(:where(ul > li):not(:where([class~='not-prose'] *))::marker) {
    @apply text-gray-700;
  }

  .post-content :global(a:hover) {
    color: var(--color-link-hover);
    text-decoration: underline;
  }
</style>
